generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}


model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String    @unique
  emailVerified DateTime?
  image         String?
  role          Role      @default(PARTICIPANT)
  points        Int       @default(0)
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  accounts    Account[]
  sessions    Session[]
  challenges  Challenge[]
  submissions Submission[]
  feedbacks   Feedback[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Challenge {
  id          String            @id @default(cuid())
  title       String
  description String            @db.Text
  difficulty  ChallengeDifficulty
  points      Int
  timeLimit   Int               // in minutes
  startDate   DateTime
  endDate     DateTime
  status      ChallengeStatus   @default(DRAFT)
  creatorId   String
  createdAt   DateTime          @default(now())
  updatedAt   DateTime          @updatedAt

  creator     User         @relation(fields: [creatorId], references: [id])
  submissions Submission[]
  testCases   TestCase[]
}

model TestCase {
  id          String @id @default(cuid())
  challengeId String
  input       String @db.Text
  expectedOutput String @db.Text
  isPublic    Boolean @default(false)
  createdAt   DateTime @default(now())

  challenge Challenge @relation(fields: [challengeId], references: [id], onDelete: Cascade)
}

model Submission {
  id          String           @id @default(cuid())
  challengeId String
  userId      String
  code        String           @db.Text
  language    String
  status      SubmissionStatus @default(PENDING)
  score       Int?
  executionTime Int?           // in milliseconds
  memory      Int?             // in KB
  submittedAt DateTime         @default(now())

  challenge Challenge  @relation(fields: [challengeId], references: [id])
  user      User       @relation(fields: [userId], references: [id])
  feedbacks Feedback[]

  @@unique([challengeId, userId])
}

model Feedback {
  id           String @id @default(cuid())
  submissionId String
  judgeId      String
  comment      String @db.Text
  rating       Int    // 1-5 stars
  createdAt    DateTime @default(now())

  submission Submission @relation(fields: [submissionId], references: [id])
  judge      User       @relation(fields: [judgeId], references: [id])
}

enum Role {
  CREATOR
  PARTICIPANT
  JUDGE
}

enum ChallengeDifficulty {
  EASY
  MEDIUM
  HARD
}

enum ChallengeStatus {
  DRAFT
  ACTIVE
  COMPLETED
  CANCELLED
}

enum SubmissionStatus {
  PENDING
  ACCEPTED
  WRONG_ANSWER
  TIME_LIMIT_EXCEEDED
  RUNTIME_ERROR
  COMPILATION_ERROR
}
