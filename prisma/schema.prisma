generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id                  String       @id @default(cuid())
  name                String?
  email               String       @unique
  emailVerified       DateTime?
  image               String?
  role                Role?        // Nullable for OAuth users selecting their role
  points              Int          @default(0)
  createdAt           DateTime     @default(now())
  updatedAt           DateTime     @updatedAt
  accounts            Account[]
  challenges          Challenge[]
  feedbacks           Feedback[]
  sessions            Session[]
  reviewedSubmissions Submission[] @relation("ReviewedSubmissions")
  submissions         Submission[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Challenge {
  id          String              @id @default(cuid())
  title       String
  description String
  difficulty  ChallengeDifficulty
  points      Int
  timeLimit   Int
  startDate   DateTime
  endDate     DateTime
  status      ChallengeStatus     @default(DRAFT)
  creatorId   String
  createdAt   DateTime            @default(now())
  updatedAt   DateTime            @updatedAt
  creator     User                @relation(fields: [creatorId], references: [id])
  submissions Submission[]
  testCases   TestCase[]
}

model TestCase {
  id             String    @id @default(cuid())
  challengeId    String
  input          String
  expectedOutput String
  isPublic       Boolean   @default(false)
  createdAt      DateTime  @default(now())
  challenge      Challenge @relation(fields: [challengeId], references: [id], onDelete: Cascade)
}

model Submission {
  id            String           @id @default(cuid())
  challengeId   String
  userId        String
  code          String?
  language      String?
  status        SubmissionStatus @default(PENDING)
  score         Int?
  executionTime Int?
  memory        Int?
  submittedAt   DateTime         @default(now())
  isDraft       Boolean          @default(true)
  fileUrl       String?
  reviewedAt    DateTime?
  reviewedById  String?
  feedbacks     Feedback[]
  challenge     Challenge        @relation(fields: [challengeId], references: [id])
  reviewedBy    User?            @relation("ReviewedSubmissions", fields: [reviewedById], references: [id])
  user          User             @relation(fields: [userId], references: [id])

  @@unique([challengeId, userId])
}

model Feedback {
  id           String     @id @default(cuid())
  submissionId String
  comment      String
  rating       Int
  createdAt    DateTime   @default(now())
  creatorId    String
  creator      User       @relation(fields: [creatorId], references: [id])
  submission   Submission @relation(fields: [submissionId], references: [id])
}

enum Role {
  CREATOR
  PARTICIPANT
  ADMIN
}

enum ChallengeDifficulty {
  EASY
  MEDIUM
  HARD
}

enum ChallengeStatus {
  DRAFT
  ACTIVE
  COMPLETED
  CANCELLED
}

enum SubmissionStatus {
  PENDING
  ACCEPTED
  WRONG_ANSWER
  TIME_LIMIT_EXCEEDED
  RUNTIME_ERROR
  COMPILATION_ERROR
  REJECTED
}
